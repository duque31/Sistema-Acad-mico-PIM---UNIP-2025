"""
storage.py
M√≥dulo de persist√™ncia de dados do Sistema Acad√™mico 
---------------------------------------------------------------
Respons√°vel por salvar e carregar informa√ß√µes de alunos, turmas e 
aulas em arquivo JSON e gerar automaticamente um resumo em TXT.
---------------------------------------------------------------"""

import json
import os

# === Fun√ß√£o: carregar_json ===
def carregar_json(caminho: str):

    # L√™ os dados de um arquivo JSON e devolve como dicion√°rio.
    # Caso o arquivo n√£o exista ou ocorra algum erro na leitura,
    # √© retornada uma estrutura padr√£o com listas vazias.

    if not os.path.exists(caminho):
        return {"alunos": [], "turmas": [], "aulas": []}

    try:
        # Abre e l√™ o conte√∫do do arquivo JSON
        with open(caminho, "r", encoding="utf-8") as f:
            dados = json.load(f)
            return dados
    except Exception as e:
        print(f"[ERRO] Falha ao carregar dados: {e}")
        # Retorna estrutura padr√£o em caso de falha
        return {"alunos": [], "turmas": [], "aulas": []}


# === Fun√ß√£o: salvar_json ===
def salvar_json(dados, caminho: str):
  
   # Salva os dados em formato JSON e gera um resumo em TXT.
   # Tamb√©m chama automaticamente a fun√ß√£o gerar_resumo_txt()
   # ap√≥s salvar com sucesso o arquivo JSON.

    try:
        # Grava o conte√∫do (dados) em formato JSON
        with open(caminho, "w", encoding="utf-8") as f:
            json.dump(dados, f, indent=4, ensure_ascii=False)
        print("[OK] Dados salvos em JSON com sucesso!")

        # Gera o relat√≥rio de texto (resumo dos dados)
        gerar_resumo_txt(dados)

    except Exception as e:
        print(f"[ERRO] Falha ao salvar dados: {e}")


# === Fun√ß√£o: gerar_resumo_txt ===
def gerar_resumo_txt(dados):
    
    """
    Cria um arquivo texto (dados_resumo.txt) com um resumo dos dados do sistema.
    O relat√≥rio cont√©m informa√ß√µes sobre:
      - Alunos cadastrados (nome, notas, m√©dia e status)
      - Turmas existentes (c√≥digo e quantidade de alunos)
      - Aulas registradas (data, conte√∫do e turma associada)
    """
    try:
        with open("dados_resumo.txt", "w", encoding="utf-8") as f:
            # Cabe√ßalho do relat√≥rio
            f.write("========================================\n")
            f.write(" RELAT√ìRIO DE DADOS - SISTEMA ACAD√äMICO\n")
            f.write("========================================\n\n")

            # --- Se√ß√£o: Alunos ---
            f.write("=== ALUNOS CADASTRADOS ===\n")
            alunos = dados.get("alunos", [])
            if not alunos:
                f.write("Nenhum aluno cadastrado.\n")
            else:
                for aluno in alunos:
                    f.write(f"Nome: {aluno.get('nome', '---')}\n")
                    f.write(f"Notas: {aluno.get('notas', [])}\n")
                    f.write(f"M√©dia: {aluno.get('media', 0):.2f}\n")
                    f.write(f"Status: {aluno.get('status', '---')}\n")
                    f.write("-" * 40 + "\n")

            # --- Se√ß√£o: Turmas ---
            f.write("\n=== TURMAS CADASTRADAS ===\n")
            turmas = dados.get("turmas", [])
            if not turmas:
                f.write("Nenhuma turma cadastrada.\n")
            else:
                for turma in turmas:
                    f.write(f"C√≥digo: {turma.get('codigo', '---')}\n")
                    f.write(f"Alunos na turma: {len(turma.get('alunos', []))}\n")
                    f.write("-" * 40 + "\n")

            # --- Se√ß√£o: Aulas ---
            f.write("\n=== AULAS REGISTRADAS ===\n")
            aulas = dados.get("aulas", [])
            if not aulas:
                f.write("Nenhuma aula registrada.\n")
            else:
                for aula in aulas:
                    f.write(f"Data: {aula.get('data', '---')}\n")
                    f.write(f"Conte√∫do: {aula.get('conteudo', '---')}\n")
                    f.write(f"Turma: {aula.get('turma', {}).get('codigo', '---')}\n")
                    f.write("-" * 40 + "\n")

        print("[OK] Resumo salvo em dados_resumo.txt!")
    except Exception as e:
        print(f"[ERRO] Falha ao gerar arquivo TXT: {e}")


# === Teste manual (executar isoladamente no terminal) ===
if __name__ == "__main__":
    print("= Teste manual do m√≥dulo de armazenamento =")

    # Estrutura de exemplo (simulando dados reais)
    dados_teste = {
        "alunos": [
            {"nome": "Gabriel", "notas": [8.0, 7.5, 9.0], "media": 8.16, "status": "Aprovado"}
        ],
        "turmas": [
            {"codigo": "ADS2025", "alunos": [{"nome": "Gabriel"}]}
        ],
        "aulas": [
            {"data": "2025-10-04", "conteudo": "Estruturas de Dados", "turma": {"codigo": "ADS2025"}}
        ]
    }

    # Testa o salvamento e a gera√ß√£o do relat√≥rio
    salvar_json(dados_teste, "dados.json")

    # Testa o carregamento
    dados_carregados = carregar_json("dados.json")
    print("\nüìò Dados carregados com sucesso:")
    print(dados_carregados)
